// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  nombre        String
  email         String        @unique
  rol           String        @default("student")
  password      String
  exams         Exam[]        // relaci칩n inversa: un usuario puede crear muchos ex치menes
  examHistory   ExamHistory[] // 游댳 historial de ex치menes visualizados
  inscripciones Inscription[] // inscripciones a ventanas de examen
  intentos      ExamAttempt[] // intentos de examen
}

model Exam {
  id         Int           @id @default(autoincrement())
  titulo     String
  profesor   User          @relation(fields: [profesorId], references: [id])
  profesorId Int
  preguntas  Pregunta[]
  history    ExamHistory[] // 游댳 historial de ex치menes visualizados
  ventanas   ExamWindow[]  // ventanas de examen
  intentos   ExamAttempt[] // intentos de examen
}

model Pregunta {
  id       Int    @id @default(autoincrement())
  texto    String
  opciones Json   // en lugar de String[]
  correcta Int
  exam     Exam   @relation(fields: [examId], references: [id])
  examId   Int
}

model ExamHistory {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  exam     Exam     @relation(fields: [examId], references: [id])
  examId   Int
  viewedAt DateTime @default(now())

  @@unique([userId, examId]) // opcional: solo una entrada por examen
}

model ExamWindow {
  id            Int           @id @default(autoincrement())
  exam          Exam          @relation(fields: [examId], references: [id])
  examId        Int
  fechaInicio   DateTime      // fecha y hora de inicio
  duracion      Int           // duraci칩n en minutos
  modalidad     String        // "remoto" o "presencial"
  cupoMaximo    Int
  notas         String?       // instrucciones adicionales
  estado        String        @default("programada") // programada, cerrada_inscripciones, en_curso, finalizada
  activa        Boolean       @default(true) // toggle r치pido del profesor
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  inscripciones Inscription[]
  intentos      ExamAttempt[]
}

model Inscription {
  id            Int        @id @default(autoincrement())
  user          User       @relation(fields: [userId], references: [id])
  userId        Int
  examWindow    ExamWindow @relation(fields: [examWindowId], references: [id])
  examWindowId  Int
  inscribedAt   DateTime   @default(now())
  cancelledAt   DateTime?  // si se cancela la inscripci칩n
  presente      Boolean?   // marcado por el profesor al iniciar la ventana
  
  @@unique([userId, examWindowId]) // un usuario solo puede inscribirse una vez por ventana
}

model ExamAttempt {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  exam          Exam        @relation(fields: [examId], references: [id])
  examId        Int
  examWindow    ExamWindow? @relation(fields: [examWindowId], references: [id])
  examWindowId  Int?        // opcional: puede ser null para ex치menes manuales
  startedAt     DateTime    @default(now())
  finishedAt    DateTime?
  respuestas    Json        // respuestas del estudiante
  puntaje       Float?      // puntaje obtenido
  estado        String      @default("en_progreso") // en_progreso, finalizado, abandonado
  
  @@unique([userId, examId, examWindowId]) // un intento por ventana o por examen manual
}


