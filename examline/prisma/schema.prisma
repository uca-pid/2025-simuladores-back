generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  nombre        String
  email         String        @unique
  password      String
  rol           String        @default("student")
  exams         Exam[]
  intentos      ExamAttempt[]
  examHistory   ExamHistory[]
  inscripciones Inscription[]
}

model Exam {
  id         Int           @id @default(autoincrement())
  titulo     String
  profesorId Int
  profesor   User          @relation(fields: [profesorId], references: [id])
  intentos   ExamAttempt[]
  history    ExamHistory[]
  ventanas   ExamWindow[]
  preguntas  Pregunta[]
}

model Pregunta {
  id       Int    @id @default(autoincrement())
  texto    String
  opciones Json
  correcta Int
  examId   Int
  exam     Exam   @relation(fields: [examId], references: [id])
}

model ExamHistory {
  id       Int      @id @default(autoincrement())
  userId   Int
  examId   Int
  viewedAt DateTime @default(now())
  exam     Exam     @relation(fields: [examId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, examId])
}

model ExamWindow {
  id            Int           @id @default(autoincrement())
  examId        Int
  fechaInicio   DateTime
  duracion      Int
  modalidad     String
  cupoMaximo    Int
  notas         String?
  estado        String        @default("programada")
  activa        Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  intentos      ExamAttempt[]
  exam          Exam          @relation(fields: [examId], references: [id])
  inscripciones Inscription[]
}

model Inscription {
  id           Int        @id @default(autoincrement())
  userId       Int
  examWindowId Int
  inscribedAt  DateTime   @default(now())
  cancelledAt  DateTime?
  presente     Boolean?
  examWindow   ExamWindow @relation(fields: [examWindowId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, examWindowId])
}

model ExamAttempt {
  id           Int         @id @default(autoincrement())
  userId       Int
  examId       Int
  examWindowId Int?
  startedAt    DateTime    @default(now())
  finishedAt   DateTime?
  respuestas   Json
  puntaje      Float?
  estado       String      @default("en_progreso")
  examWindow   ExamWindow? @relation(fields: [examWindowId], references: [id])
  exam         Exam        @relation(fields: [examId], references: [id])
  user         User        @relation(fields: [userId], references: [id])

  @@unique([userId, examId, examWindowId])
}
